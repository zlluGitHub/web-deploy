const commitSchema=require("../schema/commit"),tools=require("../public/javascripts/tools");module.exports={setlog:(body,isSend,res)=>new Promise((resolve,reject)=>{let conn=global.connect.conn;commitSchema.find({bid:body.commitBid||body.bid},(err,data)=>{if(err)console.log(err),conn.sendText&&isSend&&conn.sendText(err),res&&res.json({message:err,code:500}),console.log("构建程序成功退出！"),process.exitCode=1;else{let logConent=data[0].log;Array.isArray(body.log)?(body.log.forEach(item=>{item.time=tools.dateTime(),console.log(item.message),conn.sendText&&isSend&&conn.sendText(item.message)}),logConent=[...logConent,...body.log]):(body.log.time=tools.dateTime(),logConent=[...logConent,body.log],console.log(body.log.message),conn.sendText&&isSend&&conn.sendText(body.log.message)),body.log=logConent,body.deployState&&(body.deployState={...data[0].deployState,...body.deployState}),body.endTime=tools.dateTime(),commitSchema.updateOne({bid:body.bid},body,(err,data)=>{err?(console.log(err),conn.sendText&&isSend&&conn.sendText(err),res&&res.json({message:err,code:500}),console.log("构建程序成功退出！"),process.exitCode=1):resolve()})}})}),exitProcess:()=>{someConditionNotMet()&&(console.log("构建程序成功退出！"),printUsageToStdout(),process.exitCode=1)}};