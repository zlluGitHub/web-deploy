const express=require("express"),router=express.Router(),{handleError,handleSuccess}=require("../public/javascripts"),tools=require("../public/javascripts/tools"),workflow=require("../workflow"),database=require("../database/index.js");router.post("/webhook",(req,res,next)=>{let resBody=req.body,key="";req.get("X-Gitee-Token")?key=req.get("X-Gitee-Token"):req.get("X-Gitlab-Token")?key=req.get("X-Gitlab-Token"):req.query.key?key=req.query.key:resBody.secret&&(key=resBody.secret),database.getDeploy(key).then(async body=>{if(body&&body.isAuto){body.commitBid=tools.getUid(),body.time=tools.dateTime(),await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:body.time},res);let activeType="";"0"===body.isStatic?activeType="gitHook":"6"===body.isStatic&&(activeType="gitRemoteHook"),await database.saveCommit({bid:body.commitBid,projectId:body.bid,hookPayload:{isExit:!0,before:resBody.before,after:resBody.after,url:resBody.commits[0].url,added:resBody.commits[0].added,removed:resBody.commits[0].removed,modified:resBody.commits[0].modified,commitId:resBody.after,message:resBody.commits[0].message},activeType:activeType},res),await handleSuccess({message:`Start to prepare to build the ${body.title} project, please wait...`,data:body}),"3"===body.isStatic&&await workflow.initBackProject(body,res),"0"===body.isStatic&&await workflow.initWebhook(body,res),"6"===body.isStatic&&await workflow.initRemoteWebhook(body,res),await handleSuccess({message:`Project [${body.title}] has been built!`,data:body})}}),res.json({code:200})}),module.exports=router;