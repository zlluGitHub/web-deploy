const express=require("express"),router=express.Router(),shell=require("shelljs"),path=require("path"),tools=require("../public/javascripts/tools"),{handleError,handleSuccess}=require("../public/javascripts"),workflow=require("../workflow"),deploySchema=require("../schema/deploy"),commitSchema=require("../schema/commit"),logger=require("../logs/index.js"),server=require("../servePort"),fs=require("fs-extra"),net=require("net"),command=require("../command/index.js"),database=require("../database/index.js");deploySchema.find({},(err,data)=>{err?console.log(err):data.forEach(item=>{item.isServer&&server.openServer(item,async(state,mes)=>{var message=state?`${item.title}项目重启成功！`:`${item.title}项目重启失败！`;await logger.setlog({bid:item.commitBid,log:{message:message}},!1)})})}),router.post("/openSocket",(req,res,next)=>{global.connect.server&&global.connect.server.close(),global.connect.server=global.ws.createServer(conn=>{(global.connect.conn=conn).on("connect",code=>{console.log("webSocket 已开启连接！",code)}),conn.on("close",(code,reason)=>{console.log("Connection closed")}),conn.on("error",(code,reason)=>{console.log("Connection error")})}).listen(8001);let time=setTimeout(()=>{global.connect.server&&global.connect.server.close(),global.connect.server=null,clearTimeout(time)},3e5);res.json({message:"webSocket 服务已链接！",result:!0,code:200})}),router.get("/get",async(p2,res,next)=>{let{pageSize,pageNo,bid,title}=p2.query;pageSize=pageSize?+pageSize:10,pageNo=pageNo?+pageNo-1:0;let filter={};bid&&(filter.bid=bid),title&&(filter.title={$regex:new RegExp(`${regExp}`,"gi")});var p1=new Promise((resolve,reject)=>{deploySchema.find(filter,{_id:0,__v:0},(err,data)=>{err?reject(err):resolve(data)}).skip(pageNo*pageSize).limit(pageSize).sort({_id:-1})}),p2=new Promise((resolve,reject)=>{deploySchema.find(filter).count((err,count)=>{err?reject(err):resolve(count)})});Promise.all([p1,p2]).then(async result=>{let proArr=[];result[0].forEach(async item=>{proArr.push(new Promise((resolve,reject)=>{commitSchema.find({bid:item.commitBid},async(endTime,data)=>{var startTime;endTime?reject(endTime):(data[0]&&(startTime=new Date(data[0].startTime),endTime=new Date(data[0].endTime),item.startTime=data[0].startTime,item.endTime=data[0].endTime,item.deployState=data[0].deployState,item.hookPayload=data[0].hookPayload,item.duration=Math.floor((endTime-startTime)/1e3)),resolve(item))})}))}),Promise.all(proArr).then(async data=>{res.json({data:data,count:result[1],code:200,result:!0})}).catch(error=>{console.log(error),res.json({result:!1,code:500})})}).catch(error=>{console.log(error),res.json({result:!1,code:500})})}),router.post("/init",async(req,res)=>{let body=req.body;body.commitBid=tools.getUid(),body.bid=tools.getUid(),shell.which("git")?(await database.saveDeploy(body,res),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"init"},res),await workflow.initProject(body,res),body.port?await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`The deployment is successful, Please open port ${body.port} in the browser！`,data:body,res:res})}):await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})):await handleError({message:"Git command does not exist. Please install and try again！",isSetlog:"false",res:res})}),router.post("/initReset",async(req,res,next)=>{let body=req.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),shell.which("git")?(await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:body.time},res),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"resetInit"},res),await workflow.initProject(body,res),body.port?await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`After construction, please visit the ${body.port} port！`,data:body,res:res})}):await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})):await handleError({message:"Git command does not exist. Please install and try again！",res:res})}),router.post("/relyInstall",async(req,res,next)=>{let body=req.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:body.time},res),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"install"},res),await workflow.initRely(body,res),body.port?await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`After construction, please visit the ${body.port} port！`,data:body})}):await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})}),router.post("/relyBuild",async(req,res,next)=>{let body=req.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:body.time},res),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"build"},res),await workflow.initBuild(body,res),body.port?await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`After construction, please visit the ${body.port} port！`,data:body})}):await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})}),router.post("/updateInfo",(req,res,next)=>{let body=req.body;body.time=tools.dateTime(),body.port?workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`After construction, please visit the ${body.port} port！`,data:body,res:res})}):handleSuccess({message:"Static project deployed successfully！",data:body,res:res})}),router.post("/deleteInfo",async(result,res,next)=>{let body=result.body,gitUrl="",projectName;if(body.git&&body.git.url&&(gitUrl=body.git.url,projectName=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf(".")),body.projectName=projectName||"zll"),body.projectBackups){if("0"==body.isStatic||"1"==body.isStatic){body.port&&await server.closeServer(body).catch(async error=>{await handleError({message:"Service termination failed. Please try again！",error:error,data:body,res:res})});let order=`./${body.www}`;order=order.replace("*","");let result=await shell.exec(`rm -rf ${order}`,{cwd:path.join(__dirname,"../../backups")});0!=result.code&&await handleError({message:"Backup file deletion failed！",error:result.stderr,res:res}),result=await shell.exec(`rm -rf ${order}`,{cwd:path.join(__dirname,"../../www")}),0!=result.code&&await handleError({message:"Backup file deletion failed！",error:result.stderr,res:res})}else if("2"==body.isStatic||"3"==body.isStatic){var order=`./${body.projectName}`;body.git.url;await command.connectSSH(body,res),await command.deleteProjectSSh(body,res);var result=await shell.exec(`rm -rf ${order}`,{cwd:path.join(__dirname,"../../backDir")});0!=result.code&&await handleError({message:"Backup file deletion failed！",error:result.stderr,res:res})}else"5"!=body.isStatic&&"6"!=body.isStatic||(await command.connectSSH(body,res),await command.deleteProjectSSh(body,res),0!=(result=await shell.exec(`rm -rf ${body.bid}`,{cwd:path.join(__dirname,"../../backDir")})).code&&await handleError({message:"Backup file deletion failed！",error:result.stderr,res:res}));await res.json({message:"The item was deleted successfully",code:200})}body.projectInfo&&(await database.deleteDeploy({bid:body.bid},res),await database.deleteCommit({projectId:body.bid},res))}),router.post("/saveInfo",(req,res,next)=>{let body=req.body;body.time=tools.dateTime(),body.commitBid=tools.getUid(),body.bid=tools.getUid(),database.saveCommit({bid:body.commitBid,projectId:body.bid},res).then(()=>{database.saveDeploy(body,res).then(()=>{res.json({message:"The project information is created successfully!",bid:body.bid,code:200})}).catch(err=>{res.json({message:"The project information is created failed！",bid:body.bid,code:500})})}).catch(err=>{res.json({message:"The project log information is created failed！",bid:body.bid,code:500})})}),router.post("/history",async(req,res,next)=>{let body=req.body;body.time=tools.dateTime(),await handleSuccess({message:"Removing remote project, please wait...",data:body}),await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:"Route mode switch succeeded!",data:body,res:res})})}),router.post("/closeServer",async(req,res,next)=>{let body=req.body;await handleSuccess({message:`Closing ${body.port} port service, please wait...`,data:body}),await server.closeServer(body).then(async()=>{await handleSuccess({message:`Service port ${body.port} closed successfully!`,data:body,res:res})}).catch(async error=>{await handleError({message:`Failed to close service port ${body.port}!`,error:error,data:body,res:res})})}),router.post("/openServer",async(req,res,next)=>{let body=req.body;await workflow.openPort(body,res).then(async()=>{await handleSuccess({message:`Service port ${body.port} opened successfully!`,data:body,res:res})})}),router.post("/portIsOccupied",(message,res,next)=>{let body=message.body;try{let server=net.createServer().listen(body.port);server.on("listening",()=>{server.close();var message=`此服务端口【${body.port}】未被占用！`;res.json({message:message,data:1,code:200})}),server.on("error",err=>{var message=`此服务端口【${body.port}】已被占用，请更换其他端口！`;res.json({message:message,data:2,code:200})})}catch(err){var message;"ERR_SOCKET_BAD_PORT"===err.code?(message=`服务端口【${body.port}】设置有误，应大于等于0且小于65536！`,res.json({message:message,data:3,code:200})):(message=`服务端口【${body.port}】异常，请检查后重试！`,res.json({message:message,data:4,code:200}))}}),router.post("/isProject",(req,res,next)=>{deploySchema.find({title:req.body.title},(err,state)=>{err?(console.log(err),res.json({message:err,state:!1,code:500})):(state=0!==state.length,res.json({message:state?"此项目已存在！":"此项目暂不存在！",state:state,code:200}))})}),router.post("/isWwwFolder",(req,res,next)=>{deploySchema.find({www:req.body.www},(err,data)=>{err?(console.log(err),res.json({message:err,state:!1,code:500})):data[0]?res.json({message:"此文件夹已存在！",state:!0,code:200}):res.json({message:"此文件夹暂不存在！",state:!1,code:200})})}),router.post("/openAllServer",(req,res,next)=>{deploySchema.find({},async(err,data)=>{if(err)console.log(err),res.json({message:"项目信息获取失败！",err:err,code:500});else{for(let index=0;index<data.length;index++)data[index].port&&await server.closeServer(data[index]).then(async()=>{await server.openServer(data[index],null,res).then(()=>{}).catch(error=>{console.log(error)})}).catch(async error=>{console.log(error)});res.json({message:"所有服务已重启成功！",code:200})}})}),router.post("/closeAllServer",(req,res,next)=>{let body=req.body;deploySchema.find({},async(err,data)=>{if(err)console.log(err),res.json({message:"项目信息获取失败！",err:err,code:500});else{for(let index=0;index<data.length;index++)data[index].port&&await server.closeServer(data[index]).then(()=>{console.log(`服务端口 ${body.port} 已关闭成功！`)}).catch(()=>{console.log(`服务端口 ${body.port} 关闭失败！`)});res.json({message:"所有服务已关闭成功！",code:200})}})}),router.post("/initStatic",async(req,res,next)=>{let body=req.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),body.bid?await database.updateDeploy(body,res):(body.bid=tools.getUid(),await database.saveDeploy(body,res)),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"static"},res),await handleSuccess({message:"Preparing to deploy environment, please wait...",data:body}),await fs.ensureDirSync(path.join(__dirname,`../../backups/${body.www}/${body.commitBid}`)),await handleSuccess({message:`Ready to upload ${body.title} project file, please wait...`,data:body}),res.json({message:"Project information created successfully!",data:body,code:200})}),router.post("/initStaticRemote",async(req,res,next)=>{let body=req.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),body.bid?await database.updateDeploy(body,res):(body.bid=tools.getUid(),await database.saveDeploy(body,res)),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"staticRemote"},res),await handleSuccess({message:"Preparing to deploy environment, please wait...",data:body}),await fs.ensureDirSync(path.join(__dirname,`../../backDir/${body.bid}/${body.commitBid}`)),await handleSuccess({message:`Ready to upload ${body.title} project file, please wait...`,data:body}),res.json({message:"Project information created successfully!",data:body,code:200})}),router.post("/deployReduction",async(body,res,next)=>{body=body.body;await handleSuccess({message:"Ready to move project files to deployment root, please wait...",data:body}),await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:tools.dateTime()},res),"0"==body.isStatic||"1"==body.isStatic?(await workflow.mvFileToWww(body,res),body.port?await workflow.openPort(body,res):await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})):"5"!=body.isStatic&&"6"!=body.isStatic||await workflow.initStaticIndexRemote(body,res),await handleSuccess({message:`After construction, please visit the ${body.port} port！`,data:body,res:res})}),router.post("/initRemote",async(req,res)=>{let body=req.body;body.commitBid=tools.getUid(),shell.which("git")?(body.bid?await database.updateDeploy({bid:body.bid,commitBid:body.commitBid,time:tools.dateTime()},res):(body.bid=tools.getUid(),await database.saveDeploy(body,res)),await database.saveCommit({bid:body.commitBid,projectId:body.bid,activeType:"initRemote"},res),await workflow.initProjectRemote(body,res),await handleSuccess({message:"Static project deployed successfully！",data:body,res:res})):await handleError({message:"Git command does not exist. Please install and try again！",isSetlog:"false",res:res})}),router.post("/initBackDeploy",async(message,res)=>{let body=message.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),body.bid?await database.updateDeploy(body,res).then(()=>{console.log(`项目${body.title}信息更新成功！`)}):(body.bid=tools.getUid(),await database.saveDeploy(body,res).then(()=>{console.log(`项目${body.title}信息创建成功！`)})),await database.saveCommit({bid:body.commitBid,projectId:body.bid},res).then(()=>{console.log(`准备构建 ${body.title} 项目目录信息，请稍后...`)}),await tools.mkdirsSync(path.join(__dirname,`../../backDir/${body.bid}}`));message=`准备上传 ${body.title} 项目文件，请稍后...`;await logger.setlog({log:{message:message},bid:body.commitBid},!0,res),res.json({message:message,data:body,code:200})}),router.post("/fileToServer",async(message,res)=>{var body=message.body;await logger.setlog({log:{message:"正在将文件部署到远程服务器下，请稍后..."},bid:body.commitBid},!0,res),await workflow.deployFileToServer(body,res);message=`项目 ${body.title} 文件部署成功！`;await logger.setlog({log:{message:message},bid:body.commitBid},!0,res),res.json({message:message,data:body,code:200})}),router.post("/remoteDeployBack",async(message,res)=>{let body=message.body;body.commitBid=tools.getUid(),body.time=tools.dateTime(),shell.which("git")?(body.bid?(body.isUpdate=!0,await database.updateDeploy(body,res).then(()=>{console.log(`项目${body.title}信息更新成功！`)})):(body.bid=tools.getUid(),await database.saveDeploy(body,res).then(()=>{console.log(`项目${body.title}信息创建成功！`)})),await database.saveCommit({bid:body.commitBid,projectId:body.bid},res).then(()=>{console.log(`项目【${body.title}】日志信息创建成功！`)}),await logger.setlog({bid:body.commitBid,log:{message:`开始准备构建【${body.title}】项目，请稍后...`}},!0,res),await workflow.initBackProject(body,res),message=`项目【${body.title}】已构建完成！`,await logger.setlog({log:{message:message},bid:body.commitBid},!0,res),res.json({message:message,bid:body.bid,code:200})):(res.json({message:"Git 命令不存在，请安装后再试！",result:!1,code:500}),shell.exit(1))}),module.exports=router;