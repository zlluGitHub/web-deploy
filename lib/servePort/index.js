const express=require("express"),proxy=require("http-proxy-middleware"),history=require("connect-history-api-fallback"),net=require("net"),killPort=require("kill-port"),path=require("path"),compression=require("compression"),logger=require("../logs/index.js");let openServer=(data,callBack,res)=>new Promise(async(resolve,reject)=>{let commitArr=[{message:`项目【${data.title}】服务正在配置中，请稍后...`},{message:`正在配置【${data.title}】项目服务路由模式...`}],app=express();"history"===data.router?(app.use(history()),commitArr.push({message:`项目【${data.title}】服务路由已配置成history模式`})):commitArr.push({message:`项目【${data.title}】服务路由已配置成hash模式`}),data.gzip&&app.use(compression()),data.proxy&&data.proxy.length&&(commitArr.push({message:`正在配置【${data.title}】服务配置代理...`}),data.proxy.forEach((item,rewrite)=>{if(data.proxy[rewrite].rewrite&&data.proxy[rewrite].target){let pathRewrite={};rewrite="/"===item.rewrite.slice(0,1)?item.rewrite:`/${item.rewrite}`;pathRewrite["^"+rewrite]="",app.use(`${rewrite}/**`,proxy.createProxyMiddleware({target:item.target,changeOrigin:!0,pathRewrite:pathRewrite})),commitArr.push({message:"代理【"+rewrite+"】->【"+item.target+"】配置成功！"})}}),await logger.setlog({log:commitArr,bid:data.commitBid},!0,res)),app.use(express.static(path.join(__dirname,"../../www/"+data.www))),await logger.setlog({log:{message:"正在配置（"+data.port+"）端口服务，请稍后..."},bid:data.commitBid},!0,res);let server=app.listen(data.port),message=null;server.on("error",async error=>{global.appServer[data.bid]=server,"EADDRINUSE"===error.code?(message=`项目【${data.title}】服务（${data.port}）端口早已启动！`,await logger.setlog({log:[{message:message},{message:error}],bid:data.commitBid},!0,res),callBack&&callBack(!0),resolve(!0,message)):(message=`项目【${data.title}】服务（${data.port}）端口启动失败！`,await logger.setlog({log:[{message:message},{message:error}],deployState:{state:2},bid:data.commitBid},!0,res),callBack&&callBack(!1),reject(!1,message))}),server.on("listening",async()=>{global.appServer[data.bid]=server;var message=`项目${data.title}服务（${data.port}）端口启动成功！`;logger.setlog({log:{message:message},bid:data.commitBid},!0,res),callBack&&callBack(!0),resolve(!0,message)})}),closeServer=(data,callBack,res)=>new Promise(async(resolve,reject)=>{var message;global.appServer[data.bid]?(global.appServer[data.bid].close(),message=`项目【${data.title}】服务（${data.port}）关闭成功！`,await logger.setlog({log:{message:message},bid:data.commitBid},!0,res),callBack&&callBack(!0,message),resolve(!0,message)):killPort(data.port,"tcp").then(async()=>{var message=`项目【${data.title}】服务（${data.port}）端口关闭成功！`;await logger.setlog({log:{message:message},bid:data.commitBid},!0,res),callBack&&callBack(!0,message),resolve(!0,message)}).catch(async error=>{var message=`项目【${data.title}】服务（${data.port}）端口关闭失败！`;await logger.setlog({log:[{message:message},{message:error}],deployState:{state:2},bid:data.commitBid},!0,res),callBack&&callBack(!1,message),reject(!1,message)})});function portInUse(port){return new Promise((resolve,reject)=>{let server=net.createServer().listen(port);server.on("listening",function(){server.close(),resolve(port)}),server.on("error",function(err){"EADDRINUSE"==err.code&&resolve(err)})})}const tryUsePort=async function(port,portAvailableCallback){await portInUse(port)instanceof Error?(console.log(`端口：${port}被占用`),port++,tryUsePort(port,portAvailableCallback)):portAvailableCallback(port)};module.exports={openServer:openServer,closeServer:closeServer,tryUsePort:tryUsePort,portInUse:portInUse};