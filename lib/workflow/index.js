const command=require("../command/index.js"),fs=require("fs-extra"),path=require("path"),{handleError,handleSuccess}=require("../public/javascripts"),backupsPath="../../backups",wwwPath="../../www",server=require("../servePort"),backDirPath="../../backDir";module.exports={openPort:(body,res)=>new Promise(async(resolve,reject)=>{await handleSuccess({message:"Setting web service related configuration, please wait...",data:body}),await server.closeServer(body).then(async()=>{await server.openServer(body,null,res).then(()=>{resolve()}).catch(async error=>{await handleError({message:"Failed to open project port！",error:error,data:body,res:res})})}).catch(async err=>{await handleError({message:`Service port (${body.Port}) closing failed！`,error:error,data:body,res:res})})}),initProject:(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,fs.existsSync(path.join(__dirname,`${backupsPath}/${body.www}/${packagePath}`))&&(await handleSuccess({message:"The system has detected that the item already exists.",data:body}),await command.deleteProject(body,res)),await command.setGitConfig(body,res),await command.cloneProject(body,res),await command.initPackage(body,res),await command.buildProject(body,res);packagePath=path.join(__dirname,`${wwwPath}/${body.www}`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The system has detected that the deployment directory already exists.",data:body}),await command.deleteRoot(body,res)),await fs.ensureDir(packagePath).catch(async error=>{await handleError({message:"Project deployment root creation failed！",error:error,data:body,res:res})}),await command.mvProject(body,res),await command.mvToBackups(body,res);packagePath=path.join(__dirname,`${backupsPath}/${body.www}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),initProjectRemote:(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,fs.existsSync(path.join(__dirname,`${backDirPath}/${body.bid}/${packagePath}`))&&(await handleSuccess({message:"The system has detected that the item already exists.",data:body}),await command.deleteProject(body,res)),await command.setGitConfig(body,res),await command.cloneProject(body,res),await command.initPackage(body,res),await command.buildProject(body,res),await command.mvToBackups(body,res),await command.buildZipFile(body,res),await command.connectSSH(body,res),await command.deleteProjectSSh(body,res),await command.mkdirShell(body,res),await command.putFilesSSh(body,res),await command.undoZipFile(body,res);packagePath=path.join(__dirname,`${backupsPath}/${body.www}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),initStaticIndexRemote:(body,res)=>new Promise(async(resolve,reject)=>{await command.buildZipFile(body,res),await command.connectSSH(body,res),await command.deleteProjectSSh(body,res),await command.mkdirShell(body,res),await command.putFilesSSh(body,res),await command.undoZipFile(body,res),resolve()}),initRely:(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,await handleSuccess({message:"Reinitializing project, please wait...",data:body}),fs.existsSync(path.join(__dirname,`${backupsPath}/${body.www}/${packagePath}/node_modules`))&&await command.deleteNodeModule(body,res),await command.initPackage(body,res),await command.buildProject(body,res);packagePath=path.join(__dirname,`${wwwPath}/${body.www}`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The system has detected that the deployment directory already exists.",data:body}),await command.deleteRoot(body,res)),await fs.ensureDir(packagePath).catch(async error=>{await handleError({message:"Project deployment root creation failed！",error:error,data:body,res:res})}),await command.mvProject(body,res),await command.mvToBackups(body,res);packagePath=path.join(__dirname,`${backupsPath}/${body.www}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),initBuild:(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,await handleSuccess({message:"Repackaging project, please wait...",data:body}),await command.buildProject(body,res);packagePath=path.join(__dirname,`${wwwPath}/${body.www}`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The system has detected that the deployment directory already exists.",data:body}),await command.deleteRoot(body,res)),await fs.ensureDir(packagePath).catch(async error=>{await handleError({message:"Project deployment root creation failed！",error:error,data:body,res:res})}),await command.mvProject(body,res),await command.mvToBackups(body,res);packagePath=path.join(__dirname,`${backupsPath}/${body.www}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),mvFileToWww:async(body,res)=>new Promise(async(resolve,reject)=>{var wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await fs.ensureDir(wwwDir).catch(async error=>{await handleError({message:"Project deployment root creation failed！",error:error,data:body,res:res})}),await command.mvReductionWww(body,res),resolve()}),initWebhook:async(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,await command.setGitConfig(body,res),await command.gitPull(body,res);var path1=path.join(__dirname,`${backupsPath}/${body.www}/package.json`),packagePath=path.join(__dirname,`${backupsPath}/${body.www}/${packagePath}/package.json`);await fs.existsSync(path1)&&await fs.existsSync(packagePath)&&await fs.readFileSync(path1,"utf-8")===await fs.readFileSync(packagePath,"utf-8")?await handleSuccess({message:"The detection configuration file has not changed and is being packaged...",data:body}):(await handleSuccess({message:"Detection profile is changed, preparing to update project...",data:body}),await command.deleteNodeModule(body,res),await command.initPackage(body,res)),await command.buildProject(body,res);packagePath=path.join(__dirname,`${wwwPath}/${body.www}`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The system has detected that the deployment directory already exists.",data:body}),await command.deleteRoot(body,res)),await fs.ensureDir(packagePath).catch(async error=>{await handleError({message:"Project deployment root creation failed！",error:error,data:body,res:res})}),await command.mvProject(body,res),await command.mvToBackups(body,res);packagePath=path.join(__dirname,`${backupsPath}/${body.www}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),initRemoteWebhook:(body,res)=>new Promise(async(resolve,reject)=>{let gitUrl=body.git.url;var packagePath=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=packagePath,await command.setGitConfig(body,res),await command.gitPull(body,res);var path1=path.join(__dirname,`${backDirPath}/${body.bid}/package.json`),packagePath=path.join(__dirname,`${backDirPath}/${body.bid}/${packagePath}/package.json`);await fs.existsSync(path1)&&await fs.existsSync(packagePath)&&await fs.readFileSync(path1,"utf-8")===await fs.readFileSync(packagePath,"utf-8")?await handleSuccess({message:"The detection configuration file has not changed and is being packaged...",data:body}):(await handleSuccess({message:"Detection profile is changed, preparing to update project...",data:body}),await command.deleteNodeModule(body,res),await command.initPackage(body,res)),await command.buildProject(body,res),await command.mvToBackups(body,res),await command.buildZipFile(body,res),await command.connectSSH(body,res),await command.deleteProjectSSh(body,res),await command.mkdirShell(body,res),await command.putFilesSSh(body,res),await command.undoZipFile(body,res);packagePath=path.join(__dirname,`${backDirPath}/${body.bid}/package.json`);fs.existsSync(packagePath)&&(await handleSuccess({message:"The package.json file has been detected and is being deleted...",data:body}),await fs.remove(packagePath).catch(async error=>{await handleError({message:"Failed to delete the backup package.json file！",error:error,data:body,res:res})})),await command.copyPackage(body,res),resolve()}),initBackProject:async(body,res)=>{let gitUrl=body.git.url;var projectName=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=projectName,body.backDirPath=backDirPath,await fs.existsSync(path.join(__dirname,`${backDirPath}/${projectName}`))&&await command.deleteBackProject(body,res),await setGitConfig(body,res),body.isUpdate?await command.pullBackProject(body,res):await command.cloneBackProject(body,res),await command.buildBackProject(body,res),await command.buildZipFile(body,res),await command.connectSSH(body,res),body.isUpdate?await command.deleteProjectSSh(body,res):await command.mkdirShell(body,res),await command.putFilesSSh(body,res),await command.undoZipFile(body,res),await command.runProjectSSh(body,res)},deployFileToServer:async(body,res)=>{body.backDirPath=backDirPath,await command.buildZipFile(body,res),await command.connectSSH(body,res),await command.mkdirShell(body,res),await command.putFilesSSh(body,res),await command.undoZipFile(body,res),await command.runProjectSSh(body,res)}};