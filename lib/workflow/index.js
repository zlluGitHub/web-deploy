const tools=require("../public/javascripts/tools"),command=require("../command/index.js"),fs=require("fs"),path=require("path"),backupsPath="../../backups",wwwPath="../../www",shell=require("shelljs"),logger=require("../logs/index.js");module.exports={initProject:(body,res)=>new Promise(async(resolve,reject)=>{var startIndex=body.git.lastIndexOf("/"),wwwDir=body.git.lastIndexOf("."),wwwDir=body.git.slice(startIndex+1,wwwDir);body.projectName=wwwDir,await fs.existsSync(path.join(__dirname,`${backupsPath}/${body.www}/${wwwDir}`))&&await command.deleteProject(body,res),await command.cloneProject(body,res),await command.initPackage(body,res),await command.buildProject(body,res);wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);await fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await logger.setlog({log:{message:`开始创建部署根目录${body.www}文件夹`},bid:body.commitBid},!0,res),await fs.mkdirSync(wwwDir),await logger.setlog({log:{message:`部署根目录文件夹${body.www}创建成功！`},bid:body.commitBid},!0,res),await command.mvProject(body,res),await command.mvToBackups(body,res),await fs.existsSync(path.join(__dirname,`${backupsPath}/${body.www}/package.json`))&&await command.deletePackage(body,res),await command.copyPackage(body,res),resolve()}),initRely:(body,res)=>new Promise(async(resolve,reject)=>{var startIndex=body.git.lastIndexOf("/"),wwwDir=body.git.lastIndexOf("."),wwwDir=body.git.slice(startIndex+1,wwwDir);body.projectName=wwwDir,await fs.existsSync(path.join(__dirname,`${backupsPath}/${body.www}/${wwwDir}/node_modules`))&&await command.deleteNodeModule(body,res),await command.initPackage(body,res),await command.buildProject(body,res);wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);await fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await logger.setlog({log:{message:`开始创建部署根目录${body.www}文件夹`},bid:body.commitBid},!0,res),await fs.mkdirSync(wwwDir),await logger.setlog({log:{message:`部署根目录文件夹${body.www}创建成功！`},bid:body.commitBid},!0,res),await command.mvProject(body,res),await command.mvToBackups(body,res),resolve()}),initBuild:(body,res)=>new Promise(async(resolve,reject)=>{var startIndex=body.git.lastIndexOf("/"),wwwDir=body.git.lastIndexOf("."),wwwDir=body.git.slice(startIndex+1,wwwDir);body.projectName=wwwDir,await command.buildProject(body,res);wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);await fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await logger.setlog({log:{message:`开始创建部署根目录${body.www}文件夹`},bid:body.commitBid},!0,res),await fs.mkdirSync(wwwDir),await logger.setlog({log:{message:`部署根目录文件夹${body.www}创建成功！`},bid:body.commitBid},!0,res),await command.mvProject(body,res),await command.mvToBackups(body,res),resolve()}),initCommitReset:async(body,res)=>new Promise(async(resolve,reject)=>{var wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);await fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await logger.setlog({log:{message:`开始创建部署根目录${body.www}文件夹`},bid:body.commitBid},!0,res),await fs.mkdirSync(wwwDir),await logger.setlog({log:{message:`部署根目录文件夹${body.www}创建成功！`},bid:body.commitBid},!0,res),await command.mvReductionWww(body,res),resolve()}),initWebhook:async(body,res)=>new Promise(async(resolve,reject)=>{var wwwDir=body.git.lastIndexOf("/"),path1=body.git.lastIndexOf("."),wwwDir=body.git.slice(wwwDir+1,path1);body.projectName=wwwDir,await command.gitPull(body,res);path1=path.join(__dirname,`${backupsPath}/${body.www}/package.json`),wwwDir=path.join(__dirname,`${backupsPath}/${body.www}/${wwwDir}/package.json`);await fs.existsSync(path1)&&await fs.existsSync(wwwDir)&&await fs.readFileSync(path1,"utf-8")===await fs.readFileSync(wwwDir,"utf-8")?await logger.setlog({log:{message:"检测配置文件未发生改变，正在打包中..."},bid:body.commitBid},!0,res):(await logger.setlog({log:{message:"检测配置文件是已改变，正在准备更新项目..."},bid:body.commitBid},!0,res),await command.deletePackage(body,res),await command.copyPackage(body,res),await command.deleteNodeModule(body,res),await command.initPackage(body,res)),await command.buildProject(body,res);wwwDir=path.join(__dirname,`${wwwPath}/${body.www}`);await fs.existsSync(wwwDir)&&await command.deleteRoot(body,res),await fs.mkdirSync(wwwDir),await logger.setlog({log:{message:`部署根目录文件夹${body.www}创建成功！`},bid:body.commitBid},!0,res),await command.mvProject(body,res),await command.mvToBackups(body,res),resolve()})};