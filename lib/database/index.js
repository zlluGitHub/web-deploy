const deploySchema=require("../schema/deploy"),commitSchema=require("../schema/commit"),tools=require("../public/javascripts/tools"),{handleError,handleSuccess}=require("../public/javascripts");module.exports={saveDeploy:(body,res)=>new Promise((resolve,reject)=>{body.time=tools.dateTime(),body.gzip=body.gzip||!1,body.bid=body.bid||tools.getUid(),deploySchema.create(body,async(error,data)=>{error?await handleError({message:"Project information creation failed！",error:error,isSetlog:"false",res:res}):resolve()})}),saveCommit:(body,res)=>new Promise((resolve,reject)=>{var data={startTime:tools.dateTime(),bid:body.bid||tools.getUid(),endTime:tools.dateTime(),activeType:body.activeType||"init",log:[],projectId:body.projectId,hookPayload:body.hookPayload||{isExit:!1,before:"",after:"",url:"",added:"",removed:"",modified:"",commitId:"",message:""}};commitSchema.create(data,async(error,data)=>{error?await handleError({message:"Failed to create project log information！",error:error,isSetlog:"false",res:res}):resolve()})}),updateDeploy:(body,res)=>new Promise((resolve,reject)=>{deploySchema.updateOne({bid:body.bid},body,async(error,data)=>{error?await handleError({message:"Project information update failed！",error:error,res:res}):resolve()})}),deleteDeploy:(body,res)=>new Promise((resolve,reject)=>{deploySchema.deleteMany(body,async(error,data)=>{error?await handleError({message:`${body.title} 项目信息删除失败！`,error:error,isSetlog:"false",res:res}):resolve()})}),deleteCommit:(body,res)=>new Promise((resolve,reject)=>{commitSchema.deleteMany(body,async(error,data)=>{error?await handleError({message:`项目 ${body.title} 日志信息删除失败！`,error:error,isSetlog:"false",res:res}):resolve()})}),getDeploy:(bid,res)=>new Promise((resolve,reject)=>{deploySchema.find({bid:bid},async(error,data)=>{error?await handleError({message:`项目 ${body.title} information acquisition failed！`,error:error,isSetlog:"false",res:res}):resolve(data[0])})})};