const express=require("express"),proxy=require("http-proxy-middleware"),history=require("connect-history-api-fallback"),net=require("net"),path=require("path"),compression=require("compression"),logger=require("../javascript/console"),portIsOccupied=port=>new Promise((resolve,reject)=>{let portServer=null;portServer=net.createServer().listen(port),portServer.on("listening",()=>{portServer.close()}),portServer.on("close",function(){resolve(port),portServer=null}),portServer.on("error",function(err){console.log(err),portServer=null,reject(err)})}),closeServer=data=>new Promise((resolve,reject)=>{global.store.appServer[data.bid]?(global.store.appServer[data.bid].close(),global.store.appServer[data.bid].on("close",function(){global.store.appServer[data.bid]=null,resolve()})):data.port?portIsOccupied(data.port).then(()=>{resolve()}).catch(err=>{reject(err)}):resolve()}),openServer=data=>new Promise((resolve,reject)=>{closeServer(data).then(async()=>{let app=express();"history"==data.router&&(app.use(history()),await logger.info({...data,message:`Route to set to "${data.router}" mode.`})),data.state&&data.state.isGzip&&(app.use(compression()),await logger.info({...data,message:"Gzip compression enabled successfully."})),data.proxy&&data.proxy.length&&data.proxy[0].target&&(await logger.info({...data,message:"Configuring agent, please wait..."}),data.proxy.forEach(async(item,rewrite)=>{data.proxy[rewrite].rewrite&&data.proxy[rewrite].target&&(rewrite="/"===item.rewrite.slice(0,1)?item.rewrite:"/"+item.rewrite,app.use(""+rewrite,proxy.createProxyMiddleware({target:item.target,changeOrigin:!0,ws:!0,pathRewrite:{["^"+rewrite]:item.replace||"/"}})),await logger.info({...data,message:"Agent ["+rewrite+"] - > ["+item.target+"] : ["+(item.replace||"/")+"] configured successfully！"}))})),app.use(express.static(path.join(__dirname,"../www/"+data.www)));let server=app.listen(data.port);server.on("error",async error=>{await logger.error({...data,message:error}),reject()}),server.on("listening",async()=>{global.store.appServer[data.bid]=server,await logger.info({...data,message:`Service ${data.port} port started successfully`}),resolve()})}).catch(async error=>{await logger.error({...data,message:error}),await logger.error({...data,message:`Service port ${data.port} is occupied by other applications. Please replace other ports.`}),reject()})});module.exports={openServer:openServer,closeServer:closeServer,portIsOccupied:portIsOccupied};