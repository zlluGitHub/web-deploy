const commitSchema=require("../schema/commit"),datetime=require("silly-datetime"),userSchema=require("../schema/user"),deploySchema=require("../schema/deploy"),server=require("../javascript/serve"),config=require("../deploy.config.js"),sendWsMessage=body=>{if(global.store.ws[body.userId]){let data={type:body.type,data:{tip:body.tip,progress:body.progress}};"message"==body.type&&(data.content=["message",datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),body.content]),global.store.ws[body.userId].sendText(JSON.stringify(data))}};module.exports={initAllServer:()=>{userSchema.find({bid:"qwe-rty-uiop"},(err,data)=>{err?console.log(err):data&&data[0]||userSchema.create({bid:"qwe-rty-uiop",createTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),updateTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),role:"admin",oauth:"admin",...config.user},err=>{err?console.log(err):console.log("User information initialization succeeded！")})}),deploySchema.find({},(err,data)=>{err?console.log(err):data.forEach(item=>{item.port&&item.state&&item.state.isServer&&server.openServer(item).then(()=>{console.log(`${item.title} -> 服务端口【${item.port}】开启成功！`)}).catch(()=>{console.log(`${item.title} -> 服务端口【${item.port}】开启失败！`)})})})},stopProcess:()=>{someConditionNotMet()?(printUsageToStdout(),process.exitCode=1):process.exit(0)},updateDeployState(body){return new Promise((resolve,reject)=>{commitSchema.updateOne({bid:body.commitBid},{endTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),progress:body.progress,tip:body.tip},(error,data)=>{error?(console.log(error),reject()):(sendWsMessage({type:"state",bid:body.bid,tip:body.tip,userId:body.userId,progress:body.progress}),resolve())})})},sendWsMessage:sendWsMessage};