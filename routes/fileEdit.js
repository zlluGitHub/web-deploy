const express=require("express"),fs=require("fs-extra"),path=require("path"),router=express.Router(),multer=require("multer"),compressing=require("compressing"),axios=require("axios"),logger=require("../javascript/console");router.get("/catalog",async(dir,res,next)=>{var dir=dir.query["folder"];"backups"===dir||"www"===dir?(dir=path.join(__dirname,"../"+dir),res.json({data:(dir=>{let filesNameArr=[],mapDeep={};mapDeep[dir]=0;const getMap=(dir,curIndex)=>{let files=fs.readdirSync(dir);files.map(function(file){var subPath=path.join(dir,file);let stats=fs.statSync(subPath);if("node_modules"!=file&&(mapDeep[file]=curIndex+1,stats.isDirectory()))return getMap(subPath,mapDeep[file])})};getMap(dir,mapDeep[dir]);const readdirs=(dir,folderName,myroot)=>{let result={path:dir,title:path.basename(dir),type:"directory",deep:mapDeep[folderName]},files=fs.readdirSync(dir);return result.children=files.map(function(file){var subPath=path.join(dir,file);let stats=fs.statSync(subPath);return stats.isDirectory()?readdirs(subPath,file):{path:subPath,title:file,type:"file"}}),result};return filesNameArr.push(readdirs(dir,dir)),filesNameArr})(dir),message:"请求成功!",code:200})):res.json({data:null,message:"无权访问!",code:200})}),router.get("/content",async(projectId,res,next)=>{var{bid:filePath,projectId}=projectId.query,filePath=path.join(__dirname,`../console/${projectId}/${filePath}.log`);fs.readFile(filePath,"utf-8",function(err,data){err?(console.log(err),res.json({data:null,message:err,code:200})):res.json({data:data,message:"请求成功!",code:200})})}),router.post("/saveFile",multer().single("file"),(fileData,res,next)=>{let commitBid=fileData.get("commit-bid"),fileName=fileData.get("file-name"),relativePath=fileData.get("webkitRelativePath"),projectBid=fileData.get("project-bid"),userBid=fileData.get("user-bid"),fileNumber=fileData.get("file-number")||0;var deployFolder;0==fileNumber?global.store.file[projectBid]=0:(deployFolder=path.join(__dirname,`../backup/${projectBid}/${commitBid}/dist/`),relativePath=relativePath?deployFolder+relativePath.slice(relativePath.indexOf("/"),relativePath.length):deployFolder+fileData.file.originalname,fileData=fileData.file.buffer.toString(),global.store.file[projectBid]=global.store.file[projectBid]+1,fs.outputFile(relativePath,fileData).then(async()=>{global.store.file[projectBid]==fileNumber&&(global.store.file[projectBid]=0,axios.post(global.store.origin+"/wd/deploy/static",{bid:projectBid}).then(res=>{console.log(res.data)}).catch(error=>{console.log(error)})),await logger.info({bid:projectBid,userId:userBid,commitBid:commitBid,message:`The '${fileName}' file uploaded successfully.`}),res.json({message:"文件保存成功!",data:{bid:projectBid},code:200})}).catch(async error=>{await logger.error({bid:projectBid,userId:userBid,commitBid:commitBid,message:error}),res.json({message:"文件保存失败!",code:500})}))}),router.post("/saveZip",multer().single("file"),(filePath,res,next)=>{var buffer=filePath.file.buffer;let commitBid=filePath.get("commit-bid"),projectBid=filePath.get("project-bid"),userBid=filePath.get("user-bid");filePath=path.join(__dirname,`../backup/${projectBid}/${commitBid}/dist/`);compressing.zip.uncompress(buffer,filePath).then(async()=>{axios.post(global.store.origin+"/wd/deploy/static",{bid:projectBid}).then(res=>{console.log(res.data)}).catch(error=>{console.log(error)}),res.json({message:"文件保存成功!",data:{bid:projectBid},code:200}),await logger.info({bid:projectBid,userId:userBid,commitBid:commitBid,message:"压缩文件文件上传并解压成功!"})}).catch(async error=>{res.json({message:"文件保存失败!",code:500}),await logger.error({bid:projectBid,userId:userBid,commitBid:commitBid,message:error}),await logger.error({bid:projectBid,userId:userBid,commitBid:commitBid,message:"压缩文件文件上传或解压失败!"})})}),module.exports=router;