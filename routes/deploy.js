const express=require("express"),router=express.Router(),path=require("path"),uuidv4=require("uuid")["v4"],net=require("net"),datetime=require("silly-datetime"),deploySchema=require("../schema/deploy"),commitSchema=require("../schema/commit"),workflow=require("../command/index"),{stopProcess,updateDeployState}=require("../javascript/index"),server=require("../javascript/serve"),fs=require("fs-extra"),logger=require("../javascript/console"),axios=require("axios");router.get("/get",async(p3,res,next)=>{let{pageSize,pageNo,bid,title,userId}=p3.query;pageSize=pageSize?+pageSize:10,pageNo=pageNo?+pageNo-1:0;let filter={};bid?filter.bid=bid:title&&(filter.title={$regex:new RegExp(""+title,"gi")}),userId&&"qwe-rty-uiop"!==userId&&(filter.userId=userId);var p1=new Promise((resolve,reject)=>{deploySchema.find(filter,{_id:0,__v:0},(err,data)=>{err?reject(err):resolve(data)}).skip(pageNo*pageSize).limit(pageSize).sort({_id:-1})}),p2=new Promise((resolve,reject)=>{deploySchema.find(filter).count((err,count)=>{err?reject(err):resolve(count)})}),p3=new Promise((resolve,reject)=>{commitSchema.find({},(err,data)=>{err?reject(err):resolve(data)})});Promise.all([p1,p2,p3]).then(result=>{var newArr=result[0].map(item=>{item=JSON.parse(JSON.stringify(item||{}));var obj=result[2].find(each=>each.bid==item.commitBid);return{...item,activeType:obj?obj.activeType:""}});res.json({message:"请求成功.",code:200,data:bid?newArr[0]:newArr,total:result[1]})}).catch(error=>{console.log(error),res.json({message:"系统错误.",code:500})})});const createCommit=(body,res)=>new Promise((resolve,reject)=>{var time=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss");commitSchema.create({projectId:body.bid,userId:body.userId,startTime:time,endTime:time,type:body.type,bid:body.commitBid,remark:body.remark,activeType:body.activeType},async(error,data)=>{error?(res.json({message:"Log information creation failed.",code:500}),await logger.error({...body,message:error}),stopProcess()):(await logger.info({...body,message:"Log configuration information submitted successfully."}),resolve())})}),updateCommit=(body,res)=>new Promise((resolve,reject)=>{var time=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss");let obj={startTime:time,endTime:time};body.userId&&(obj.userId=body.userId),body.type&&(obj.type=body.type),body.remark&&(obj.remark=body.remark),commitSchema.updateOne({bid:body.commitBid},obj,async(error,data)=>{error?(res.json({message:"Log information creation failed.",code:500}),await logger.error({...body,message:error}),stopProcess()):(await logger.info({...body,message:"Log configuration information submitted successfully."}),resolve())})});router.post("/create",async(req,res)=>{let body=req.body;body.bid=uuidv4(),body.commitBid=uuidv4(),body.state=body.state||{isGzip:!0,isServer:!1,isAuto:body.git&&body.git.url},body.proxy=body.proxy||[{rewrite:"",replace:"",target:""}],body.createTime=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),body.updateTime=body.createTime,await createCommit(body,req),await logger.info({...body,message:"Submitting log item configuration information."}),deploySchema.create(body,async(error,data)=>{if(error)res.json({message:"Failed to save project information.",code:500}),await logger.error({...body,message:error}),await updateDeployState({...body,progress:10,tip:"失败"});else{await logger.info({...body,message:"Project configuration information submitted successfully."}),await updateDeployState({...body,progress:10});let data={bid:body.bid,commitBid:body.commitBid};"1"==body.type||"3"==body.type?axios.post(global.store.origin+"/wd/deploy/install",body).then(res=>{console.log(res)}).catch(error=>{console.log(error)}):"2"!=body.type&&"4"!=body.type||(global.store.file[body.bid]=0),res.json({message:"后台正在部署，请稍后.",data:data,code:200})}})}),router.post("/update",async(req,res)=>{let body=req.body;var time=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss");body.updateTime=time,0!==body.fileNumber?(body.commitBid=uuidv4(),await createCommit(body,req)):await updateCommit(body,req),await logger.info({...body,message:"Submitting log item configuration information."}),deploySchema.updateOne({bid:body.bid},body,async(error,data)=>{if(error)res.json({message:"项目信息保存失败.",code:500}),await logger.error({...body,message:error}),await updateDeployState({...body,progress:10,tip:"失败"});else{await logger.info({...body,message:"Project configuration information submitted successfully."}),await updateDeployState({...body,progress:10});let data={bid:body.bid,commitBid:body.commitBid};"1"==body.type||"3"==body.type?axios.post(global.store.origin+"/wd/deploy/install",body).then(res=>{console.log(res.data)}).catch(error=>{console.log(error)}):"2"!=body.type&&"4"!=body.type||(global.store.file[body.bid]=0),res.json({message:"后台正在部署，请稍后.",data:data,code:200})}})});const moveDistToWww=async body=>{await workflow.moveBackupToWww(body).then(async()=>{await updateDeployState({...body,progress:body.port?82:100,tip:body.port?"":"成功"}),await logger.info({...body,message:"The package file was successfully copied to the root directory."})}).catch(async()=>{await updateDeployState({...body,progress:82,tip:"失败"}),await logger.error({...body,message:"An error occurred while copying the package file to the root directory."}),stopProcess()}),body.port&&server.openServer(body).then(()=>{deploySchema.updateOne({bid:body.bid},{updateTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),state:{isGzip:!0,isServer:!0,isAuto:"1"==body.type}},error=>{error?(console.log(error),logger.error({...body,message:error})):(updateDeployState({...body,progress:100,tip:"成功"}),logger.info({...body,message:"Project deployment succeeded!"}),logger.info({...body,message:"Git key："+body.bid}))})}).catch(()=>{updateDeployState({...body,progress:98,tip:"失败"}),logger.error({...body,message:"Project deployment failed."})})},moveDistToRemote=async body=>{await workflow.connectSSH(body).catch(async()=>{await updateDeployState({...body,progress:82,tip:"失败"}),await logger.error({...body,message:"Remote server connection failed."}),stopProcess()}),await workflow.deleteAllDistFile(body).catch(async()=>{await updateDeployState({...body,progress:85,tip:"失败"}),await logger.error({...body,message:"Failed to delete the existing file."}),stopProcess()}),await workflow.putFolderSSh(body).catch(async()=>{await updateDeployState({...body,progress:86,tip:"失败"}),await logger.error({...body,message:"Package file upload failed."}),stopProcess()}),await workflow.moveAllFileOutdist(body).catch(async()=>{await updateDeployState({...body,progress:92,tip:"失败"}),await logger.error({...body,message:"An error occurred while moving all files outside the dist folder."}),stopProcess()}),deploySchema.updateOne({bid:body.bid},{updateTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),state:{isGzip:!0,isServer:!0,isAuto:"3"==body.type}},async error=>{error?(console.log(error),logger.error({...body,message:error})):(await updateDeployState({...body,progress:100,tip:"成功"}),await logger.info({...body,message:"The package file was successfully copied to the root directory."}),"3"==body.type&&await logger.info({...body,message:"Git key："+body.bid}))})};router.post("/install",async(path2,path1)=>{path1.json({message:"正在部署，请稍后...",code:200});let body=path2.body,gitUrl=body.git.url,projectName=gitUrl.slice(gitUrl.lastIndexOf("/")+1,gitUrl.lastIndexOf("."));body.projectName=projectName.replace("*",""),body.commitBid=body.commitBid||uuidv4(),body.isReset&&await workflow.deleteProject(body).then(async()=>{await updateDeployState({...body,progress:20})}).catch(async()=>{await updateDeployState({...body,progress:20,tip:"失败"}),stopProcess()}),"private"==body.git.storeState&&await workflow.setGitConfig(body).then(async()=>{await updateDeployState({...body,progress:26})}).catch(async()=>{await updateDeployState({...body,progress:26,tip:"失败"}),stopProcess()});var cwd=path.join(__dirname,`../project/${body.bid}/`+body.projectName);fs.existsSync(cwd)?await workflow.pullBackProject(body).then(async()=>{await updateDeployState({...body,progress:28})}).catch(async()=>{await updateDeployState({...body,progress:28,tip:"失败"}),stopProcess()}):await workflow.cloneProject(body).then(async()=>{await updateDeployState({...body,progress:28})}).catch(async()=>{await updateDeployState({...body,progress:28,tip:"失败"}),stopProcess()});path1=path.join(__dirname,`../project/${body.bid}/${body.projectName}/package.json`),path2=path.join(__dirname,`../console/${body.bid}/package.json`),cwd=path.join(__dirname,`../project/${body.bid}/${body.projectName}/node_modules`);fs.existsSync(path1)&&fs.existsSync(path2)&&fs.readFileSync(path1,"utf-8")===fs.readFileSync(path2,"utf-8")||(await workflow.copyPackage(body).then(async()=>{await updateDeployState({...body,progress:36})}).catch(async()=>{await updateDeployState({...body,progress:36,tip:"失败"}),stopProcess()}),fs.existsSync(cwd)&&await workflow.deleteNodeModule(body).then(async()=>{await updateDeployState({...body,progress:46})}).catch(async()=>{await updateDeployState({...body,progress:46,tip:"失败"}),stopProcess()})),fs.existsSync(cwd)||await workflow.initPackage(body).then(async()=>{await updateDeployState({...body,progress:52})}).catch(async()=>{await updateDeployState({...body,progress:52,tip:"失败"}),stopProcess()}),await workflow.buildProject(body).then(async()=>{await updateDeployState({...body,progress:60})}).catch(async()=>{await updateDeployState({...body,progress:60,tip:"失败"}),stopProcess()}),await workflow.backupDist(body).then(async()=>{await updateDeployState({...body,progress:76})}).catch(async()=>{await updateDeployState({...body,progress:76,tip:"失败"}),stopProcess()}),"1"==body.type||"2"==body.type?await moveDistToWww(body):"3"!=body.type&&"4"!=body.type||await moveDistToRemote(body)}),router.post("/static",(req,res)=>{res.json({message:"正在部署，请稍后...",code:200});let body=req.body;axios.get(global.store.origin+"/wd/deploy/get",{params:{bid:body.bid}}).then(async itme=>{body={...itme.data.data,...body};itme=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss");commitSchema.updateOne({bid:body.commitBid},{startTime:itme,endTime:itme},error=>{error&&(console.log(error),stopProcess())}),deploySchema.updateOne({bid:body.bid},{updateTime:datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),commitBid:body.commitBid},error=>{error&&(console.log(error),stopProcess())}),"1"==body.type||"2"==body.type?await moveDistToWww(body):"3"!=body.type&&"4"!=body.type||await moveDistToRemote(body)})}),router.get("/openAllServer",(req,res,next)=>{deploySchema.find({},(err,data)=>{if(err)console.log(err),res.json({message:"操作失败.",code:500});else{let promiseArr=[];data.forEach(item=>{item.port&&(item.state.isServer=!0,promiseArr.push(axios.post(global.store.origin+"/wd/deploy/updateInfo",item)))}),Promise.all(promiseArr).then(()=>{res.json({message:"操作成功.",code:200})}).catch(error=>{console.log(error),res.json({message:"操作失败.",code:500})})}})}),router.get("/closeAllServer",(req,res,next)=>{deploySchema.find({},(err,data)=>{if(err)console.log(err),res.json({message:"操作失败.",code:500});else{let promiseArr=[];data.forEach(item=>{item.port&&item.state&&item.state.isServer&&(item.state.isServer=!1,promiseArr.push(axios.post(global.store.origin+"/wd/deploy/updateInfo",item)))}),Promise.all(promiseArr).then(()=>{res.json({message:"操作成功.",code:200})}).catch(error=>{console.log(error),res.json({message:"操作失败.",code:500})})}})}),router.post("/updateInfo",(req,res,next)=>{let body=req.body;body.updateTime=datetime.format(new Date,"YYYY-MM-DD HH:mm:ss"),deploySchema.updateOne({bid:body.bid},body,(error,data)=>{error?(console.log(error),res.json({message:"操作失败.",code:500})):(body.port&&body.state.isServer?server.openServer(body):server.closeServer(body)).then(()=>{res.json({message:"操作成功.",code:200})}).catch(()=>{res.json({message:"操作失败.",code:500})})})}),router.post("/updateStatic",async(req,res,next)=>{let body=req.body;await logger.info({...body,message:"Deploying, please wait..."}),axios.get(global.store.origin+"/wd/deploy/get",{params:{bid:body.bid}}).then(resDeploy=>{res.json({message:"操作成功.",code:200}),body=resDeploy.data.data,body.port&&body.state.isServer?(logger.info({...body,message:"Reset running service..."}),server.openServer(body).then(()=>{updateDeployState({...body,progress:100,tip:"成功"}),logger.info({...body,message:"Service port restarted successfully!"})}).catch(()=>{updateDeployState({...body,progress:95,tip:"失败"}),logger.error({...body,message:"Service port restarted failed!"})})):(updateDeployState({...body,progress:100,tip:"成功"}),logger.info({...body,message:"Project information updated successfully!"}))}).catch(()=>{updateDeployState({...body,progress:95,tip:"失败"}),logger.error({bid:body.bid,commitBid:body.commitBid,message:"Project information acquisition failed."}),res.json({message:"操作失败.",code:500})})}),router.post("/delete",(req,res,next)=>{let body=req.body;server.closeServer(body).then(()=>{deploySchema.deleteMany({bid:body.bid},async(error,data)=>{error?res.json({message:"部署信息删除失败.",code:500}):(commitSchema.deleteMany({projectId:body.bid},(error,data)=>{error?(console.log(error),res.json({message:"发生未知错误，删除失败！",code:500})):res.json({message:"后台正在删除，请稍后...",code:200})}),body.git&&body.git.url&&await workflow.deleteProject(body).catch(()=>{console.log(error)}),await workflow.deleteBackup(body).catch(()=>{console.log(error)}),await workflow.deleteWww(body).catch(()=>{console.log(error)}),await workflow.deleteLog(body).catch(()=>{console.log(error)}))})}).catch(()=>{res.json({message:"部署端口关闭失败，删除失败！",code:500})})}),router.post("/portIsOccupied",(message,res,next)=>{const body=message.body;let portServer=null;try{portServer=net.createServer().listen(body.port),portServer.on("listening",()=>{portServer.close()}),portServer.on("close",()=>{portServer=null;var message=`此服务端口【${body.port}】未被占用.`;res.json({message:message,data:1,code:200})}),portServer.on("error",err=>{var message=`此服务端口【${body.port}】已被占用，请更换其他端口.`;res.json({message:message,data:2,code:200}),portServer=null})}catch(err){if("ERR_SOCKET_BAD_PORT"===err.code){message=`服务端口【${body.port}】设置有误，应大于等于0且小于65536.`;res.json({message:message,data:3,code:200})}else{let message=`服务端口【${body.port}】异常，请检查后重试.`;res.json({message:message,data:4,code:200})}portServer=null}}),router.post("/isWwwFolder",(req,res,next)=>{deploySchema.find({www:req.body.www},(err,data)=>{err?(console.log(err),res.json({message:err,state:!1,code:500})):data[0]?res.json({message:"此根目录已存在.",state:!0,code:200}):res.json({message:"此根目录暂不存在.",state:!1,code:200})})}),module.exports=router;